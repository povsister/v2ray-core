package dnscircuit

import (
	routercommon "github.com/v2fly/v2ray-core/v5/app/router/routercommon"
	_ "github.com/v2fly/v2ray-core/v5/common/protoext"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tagged inbounds for incoming connection observation,
	// It renews associated route records when activity seen on given tagged inbounds.
	// Routes are normally renewed by regular DNS lookups,
	// this is only a backup routine to renew active routing table entries.
	InboundTags []string `protobuf:"bytes,1,rep,name=inbound_tags,json=inboundTags,proto3" json:"inbound_tags,omitempty"`
	// Tags to filter out certain outgoing connection,
	// Domains with its resolved addresses will be both sent to v2ray's router
	// to determine which outbound it should take.
	// If the tag of taken outbound matches any tag given here, the routing entries to
	// domain's addresses will be announced immediately.
	OutboundTags []string `protobuf:"bytes,2,rep,name=outbound_tags,json=outboundTags,proto3" json:"outbound_tags,omitempty"`
	BalancerTags []string `protobuf:"bytes,3,rep,name=balancer_tags,json=balancerTags,proto3" json:"balancer_tags,omitempty"`
	// Tag for dns outbound for intercepting & analyzing incoming DNS traffic.
	DnsOutboundTag string `protobuf:"bytes,4,opt,name=dns_outbound_tag,json=dnsOutboundTag,proto3" json:"dns_outbound_tag,omitempty"`
	// Seconds to clean inactive routes.
	InactiveClean int64 `protobuf:"varint,5,opt,name=inactive_clean,json=inactiveClean,proto3" json:"inactive_clean,omitempty"`
	// OSPFv2 settings
	OspfSetting *OSPFInstanceConfig `protobuf:"bytes,6,opt,name=ospf_setting,json=ospfSetting,proto3" json:"ospf_setting,omitempty"`
	// persistent route CIDRs to announce when v2ray starts.
	// Only geoip and IPv4 CIDRs are supported.
	PersistentRoute []*routercommon.GeoIP `protobuf:"bytes,7,rep,name=persistent_route,json=persistentRoute,proto3" json:"persistent_route,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_dnscircuit_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_app_dnscircuit_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_app_dnscircuit_config_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetInboundTags() []string {
	if x != nil {
		return x.InboundTags
	}
	return nil
}

func (x *Config) GetOutboundTags() []string {
	if x != nil {
		return x.OutboundTags
	}
	return nil
}

func (x *Config) GetBalancerTags() []string {
	if x != nil {
		return x.BalancerTags
	}
	return nil
}

func (x *Config) GetDnsOutboundTag() string {
	if x != nil {
		return x.DnsOutboundTag
	}
	return ""
}

func (x *Config) GetInactiveClean() int64 {
	if x != nil {
		return x.InactiveClean
	}
	return 0
}

func (x *Config) GetOspfSetting() *OSPFInstanceConfig {
	if x != nil {
		return x.OspfSetting
	}
	return nil
}

func (x *Config) GetPersistentRoute() []*routercommon.GeoIP {
	if x != nil {
		return x.PersistentRoute
	}
	return nil
}

type OSPFInstanceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// net interface name
	IfName string `protobuf:"bytes,1,opt,name=if_name,json=ifName,proto3" json:"if_name,omitempty"`
	// listen address and network mask
	Address *routercommon.CIDR `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *OSPFInstanceConfig) Reset() {
	*x = OSPFInstanceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_app_dnscircuit_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSPFInstanceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSPFInstanceConfig) ProtoMessage() {}

func (x *OSPFInstanceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_app_dnscircuit_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSPFInstanceConfig.ProtoReflect.Descriptor instead.
func (*OSPFInstanceConfig) Descriptor() ([]byte, []int) {
	return file_app_dnscircuit_config_proto_rawDescGZIP(), []int{1}
}

func (x *OSPFInstanceConfig) GetIfName() string {
	if x != nil {
		return x.IfName
	}
	return ""
}

func (x *OSPFInstanceConfig) GetAddress() *routercommon.CIDR {
	if x != nil {
		return x.Address
	}
	return nil
}

var File_app_dnscircuit_config_proto protoreflect.FileDescriptor

var file_app_dnscircuit_config_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x6e, 0x73, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x76,
	0x32, 0x72, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x6e,
	0x73, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x1a, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x65, 0x78, 0x74, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x61, 0x70, 0x70, 0x2f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x89, 0x03, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x61, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x5f,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x6e, 0x73, 0x5f,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x6e, 0x73, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x54,
	0x61, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63,
	0x6c, 0x65, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x50, 0x0a, 0x0c, 0x6f, 0x73, 0x70,
	0x66, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x76, 0x32, 0x72, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x64, 0x6e, 0x73, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x2e, 0x4f, 0x53, 0x50, 0x46,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b,
	0x6f, 0x73, 0x70, 0x66, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x54, 0x0a, 0x10, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x76, 0x32, 0x72, 0x61, 0x79, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x50,
	0x52, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x3a, 0x19, 0x82, 0xb5, 0x18, 0x15, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x0a, 0x64, 0x6e, 0x73, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x22, 0x71, 0x0a, 0x12,
	0x4f, 0x53, 0x50, 0x46, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x66, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x76,
	0x32, 0x72, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x49, 0x44, 0x52, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x6c, 0x0a, 0x1d, 0x63, 0x6f, 0x6d, 0x2e, 0x76, 0x32, 0x72, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x64, 0x6e, 0x73, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
	0x32, 0x66, 0x6c, 0x79, 0x2f, 0x76, 0x32, 0x72, 0x61, 0x79, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x35, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x64, 0x6e, 0x73, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0xaa, 0x02, 0x19, 0x56, 0x32, 0x52, 0x61, 0x79, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x70, 0x70, 0x2e, 0x44, 0x6e, 0x73, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_app_dnscircuit_config_proto_rawDescOnce sync.Once
	file_app_dnscircuit_config_proto_rawDescData = file_app_dnscircuit_config_proto_rawDesc
)

func file_app_dnscircuit_config_proto_rawDescGZIP() []byte {
	file_app_dnscircuit_config_proto_rawDescOnce.Do(func() {
		file_app_dnscircuit_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_dnscircuit_config_proto_rawDescData)
	})
	return file_app_dnscircuit_config_proto_rawDescData
}

var file_app_dnscircuit_config_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_app_dnscircuit_config_proto_goTypes = []interface{}{
	(*Config)(nil),             // 0: v2ray.core.app.dnscircuit.Config
	(*OSPFInstanceConfig)(nil), // 1: v2ray.core.app.dnscircuit.OSPFInstanceConfig
	(*routercommon.GeoIP)(nil), // 2: v2ray.core.app.router.routercommon.GeoIP
	(*routercommon.CIDR)(nil),  // 3: v2ray.core.app.router.routercommon.CIDR
}
var file_app_dnscircuit_config_proto_depIdxs = []int32{
	1, // 0: v2ray.core.app.dnscircuit.Config.ospf_setting:type_name -> v2ray.core.app.dnscircuit.OSPFInstanceConfig
	2, // 1: v2ray.core.app.dnscircuit.Config.persistent_route:type_name -> v2ray.core.app.router.routercommon.GeoIP
	3, // 2: v2ray.core.app.dnscircuit.OSPFInstanceConfig.address:type_name -> v2ray.core.app.router.routercommon.CIDR
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_app_dnscircuit_config_proto_init() }
func file_app_dnscircuit_config_proto_init() {
	if File_app_dnscircuit_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_app_dnscircuit_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_app_dnscircuit_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSPFInstanceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_dnscircuit_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_app_dnscircuit_config_proto_goTypes,
		DependencyIndexes: file_app_dnscircuit_config_proto_depIdxs,
		MessageInfos:      file_app_dnscircuit_config_proto_msgTypes,
	}.Build()
	File_app_dnscircuit_config_proto = out.File
	file_app_dnscircuit_config_proto_rawDesc = nil
	file_app_dnscircuit_config_proto_goTypes = nil
	file_app_dnscircuit_config_proto_depIdxs = nil
}
